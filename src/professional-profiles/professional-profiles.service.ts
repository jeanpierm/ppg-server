import { Injectable, Logger } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { EntityStatus } from 'src/shared/enums/status.enum';
import { User } from 'src/users/schemas/users.schema';
import { GenerateProfessionalProfile } from './algorithm/generate-professional-profile';
import {
  ProfessionalProfile,
  ProfessionalProfileDocument,
} from './schemas/professional-profile.schema';

@Injectable()
export class ProfessionalProfilesService {
  private readonly logger = new Logger(ProfessionalProfilesService.name);

  constructor(
    @InjectModel(ProfessionalProfile.name)
    private readonly proProfileModel: Model<ProfessionalProfileDocument>,
    private readonly generateProfessionalProfile: GenerateProfessionalProfile,
  ) {}

  /**
   * Genera un perfil profesional utilizando un algoritmo que hace Web Scraping.
   * El perfil generado se persiste en la base de datos.
   * @param user - current user
   */
  async generate(
    user: User,
    jobTitle: string,
    location: string,
  ): Promise<ProfessionalProfile> {
    const generatedProfile =
      await this.generateProfessionalProfile.executeAlgorithm(
        user,
        jobTitle,
        location,
      );
    this.logger.log(`Professional profile generated by user ${user._id}`);
    const createdProfile = await this.create(user, generatedProfile);
    this.logger.debug(`Professional profile generated`, createdProfile);
    return createdProfile.populate('owner');
  }

  private create(user: User, proProfile: ProfessionalProfile) {
    this.logger.log(`Professional profile created by user ${user._id}`);
    return this.proProfileModel.create(proProfile);
  }

  async getSortedByCreatedDateAsc(
    user: User,
    skip = 0,
    limit = 25,
  ): Promise<ProfessionalProfile[]> {
    const profiles = await this.proProfileModel
      .find({ owner: user, status: EntityStatus.ACTIVE })
      .skip(skip)
      .limit(limit)
      .sort({ createdAt: -1 })
      .populate('owner')
      .exec();
    this.logger.log(`Professional profiles obtained by user ${user._id}`);
    return profiles;
  }

  async getRandom(): Promise<ProfessionalProfile> {
    const profilesCount = await this.proProfileModel.count().exec();
    const random = Math.floor(Math.random() * profilesCount);
    const profile = await this.proProfileModel.findOne().skip(random).exec();
    this.logger.log(`Random professional profile obtained`);
    return profile;
  }

  async remove(user: User, profileId: string): Promise<void> {
    await this.proProfileModel.findOneAndUpdate(
      { _id: profileId },
      { status: EntityStatus.INACTIVE },
    );
    this.logger.log(`Professional profiles deleted by user ${user._id}`);
  }
}
